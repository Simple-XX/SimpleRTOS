
#1: 通用编译规则
include $(COMMON_CONFIG_DIR)/common_configs.mk

#2: 开发板
CATOS_BOARD_BSP								=	stm32f103vet6_fire
# 可选开发板：
# 1）. stm32f103vet6_fire 野火指南者开发板			(cortex-m3:stm32f103vet6)
# 2）. stm32f103c8t6_min	c8t6最小系统板			   (cortex-m3:stm32f103c8t6)

#3: 编译控制
#3.1是否显示详细编译命令和信息
compile_enable_detail 		= n

#4: 指定部分模块的编译与否
#4.1: 内核模块
#CATOS
# bsp
# src
# test
	CATOS_ENABLE_TEST							=	y
		CATOS_TEST_CAT_STRING					=   n
#7.2: 库


#4: 链接
# 链接脚本根据选择的板子决定
CLINK_FLAGS += -Wl,--gc-sections
CLINK_FLAGS += -Wl,--cref
CLINK_FLAGS += -specs=nano.specs
CLINK_FLAGS += -mthumb
CLINK_FLAGS += -mthumb-interwork
CLINK_FLAGS += -fdata-sections -ffunction-sections
CLINK_FLAGS += -Wl,--wrap=atexit
CLINK_FLAGS += -nostartfiles
CLINK_FLAGS += -Wl,--nostdlib
#CLINK_FLAGS += -Wl,--print-gc-sections
#CLINK_FLAGS += -std=c99

#5: c文件编译
CFLAGS += -Wall
CFLAGS += -ggdb
CFLAGS += -fdata-sections -ffunction-sections
CFLAGS += -mthumb
CFLAGS += -mthumb-interwork
CFLAGS += -nostartfiles
#CFLAGS += -std=c99
#CFLAGS += -MMD -MP -MF "$(@:%.o=%.d)"

#6: 汇编文件
ASMFLAGS += -Wall
ASMFLAGS += -ggdb
ASMFLAGS += -fdata-sections -ffunction-sections
ASMFLAGS += -mthumb
ASMFLAGS += -mthumb-interwork
ASMFLAGS += -nostartfiles

#8: 处理前面的配置
ifeq ($(CATOS_BOARD_BSP), stm32f103vet6_fire)
# 1.板子和库相关的宏定义
	CFLAGS += -DUSE_HAL_DRIVER -DSTM32F103xE
# 2.包含处理器架构相关的规则
    include $(BUILD_DIR)/arch_config/cortex_m3.config
# 3.CATOS_LINK_SCRIPT 变量用在Makefile_content输出信息
    CLINK_FLAGS += -Wl,-T "$(PROJECT_DIR)/$(PROJECT)/$(PROJECT)_vet6.ld"
    CATOS_LINK_SCRIPT = $(PROJECT)/$(PROJECT)_vet6.ld
endif

ifeq ($(CATOS_BOARD_BSP), stm32f103c8t6_min)
	CFLAGS += -DUSE_HAL_DRIVER -DSTM32F103xB
    include $(BUILD_DIR)/arch_config/cortex_m3.config
    CLINK_FLAGS += -Wl,-T "$(PROJECT_DIR)/$(PROJECT)/$(PROJECT)_c8t6.ld"
    CATOS_LINK_SCRIPT = $(PROJECT)/$(PROJECT)_c8t6.ld
endif




